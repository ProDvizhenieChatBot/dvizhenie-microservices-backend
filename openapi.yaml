openapi: 3.0.3
info:
  title: API для благотворительного фонда "Движение Жизни"
  description: |-
    Микросервисная API для обработки заявок подопечных.
    Предоставляет эндпоинты для управления сессиями, анкетами, файлами и администрирования.
  version: 2.0.0

servers:
  - url: http://localhost:8000/api/v1
    description: Локальный сервер для разработки (вход через Nginx Gateway)

tags:
  - name: User Sessions
    description: Создание и возобновление сессий для пользователей (Telegram Bot).
  - name: Application Filling
    description: Эндпоинты для пользователей (Mini App) для заполнения и отправки анкеты.
  - name: Admin Applications
    description: Эндпоинты для сотрудников фонда для управления заявками. Требуют Basic Auth.
  - name: Form Schemas
    description: Получение схем анкет для динамической отрисовки.
  - name: Files
    description: Загрузка файлов и получение ссылок на скачивание.
  - name: Health Checks
    description: Проверка состояния сервисов.

paths:
  # --- User Sessions ---
  /sessions/telegram:
    post:
      tags:
        - User Sessions
      summary: Создать или возобновить сессию для Telegram-бота
      description: |-
        Вызывается `bot-service` при старте диалога с пользователем.
        Сервис ищет незавершенную заявку по `telegram_id`.
        - Если найдена, возвращает UUID существующей заявки.
        - Если не найдена, создает новую заявку, связывает ее с `telegram_id` и возвращает ее UUID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TelegramSessionRequest"
      responses:
        "200":
          description: Сессия успешно создана или найдена.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionResponse"

  # --- Application Filling (Public) ---
  /applications/{application_uuid}:
    get:
      tags:
        - Application Filling
      summary: Получить данные своей текущей заявки
      description: |-
        Mini App использует этот эндпоинт для получения данных анкеты и продолжения заполнения.
        `application_uuid` в пути выступает в роли токена доступа.
      parameters:
        - name: application_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Данные заявки.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationPublic"
    patch:
      tags:
        - Application Filling
      summary: Сохранить прогресс заполнения заявки
      description: Mini App периодически отправляет обновленные данные (`data` JSON) для сохранения на сервере.
      parameters:
        - name: application_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationUpdate"
      responses:
        "200":
          description: Заявка успешно обновлена.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationPublic"

  /applications/{application_uuid}/submit:
    post:
      tags:
        - Application Filling
      summary: Отправить заполненную заявку на рассмотрение
      description: Финальный шаг для пользователя. Меняет статус заявки с `draft` на `new`.
      parameters:
        - name: application_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Заявка успешно отправлена.

  /applications/{application_uuid}/files:
    post:
      tags:
        - Application Filling
      summary: Привязать загруженный файл к заявке
      description: |-
        После успешной загрузки файла в `file-storage-service`, Mini App вызывает этот эндпоинт,
        чтобы создать связь между заявкой и файлом.
      parameters:
        - name: application_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileLinkRequest"
      responses:
        "201":
          description: Файл успешно привязан к заявке.

  # --- Admin: Applications ---
  /applications:
    get:
      tags:
        - Admin Applications
      summary: (Админ) Получить список всех заявок
      security:
        - AdminBasicAuth: []
      parameters:
        - name: status
          in: query
          schema:
            $ref: "#/components/schemas/ApplicationStatus"
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        "200":
          description: Список заявок.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApplicationAdmin"

  /admin/applications/{application_uuid}: # Note: Path is logically distinct for clarity, handled by Nginx
    get:
      tags:
        - Admin Applications
      summary: (Админ) Получить детальную информацию по заявке
      security:
        - AdminBasicAuth: []
      parameters:
        - name: application_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Детали заявки.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationAdmin"
    patch:
      tags:
        - Admin Applications
      summary: (Админ) Обновить статус или комментарий заявки
      security:
        - AdminBasicAuth: []
      parameters:
        - name: application_uuid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationAdminUpdate"
      responses:
        "200":
          description: Статус/комментарий обновлен.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationAdmin"

  # --- Form Schemas ---
  /forms/schema/active:
    get:
      tags:
        - Form Schemas
      summary: Получить активную схему анкеты
      description: Возвращает актуальную JSON-схему для динамической отрисовки анкеты в Mini App.
      responses:
        "200":
          description: Успешный ответ со схемой анкеты.
          content:
            application/json:
              schema:
                type: object # The schema is dynamic, so we just define it as a generic object.

  # --- Files ---
  /files/upload:
    post:
      tags:
        - Files
      summary: Загрузить файл
      description: Принимает файл и сохраняет его в S3-хранилище (MinIO). Возвращает уникальный ID файла.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: Файл успешно загружен.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileUploadResponse"

  /files/{file_id}/download-link:
    get:
      tags:
        - Files
      summary: (Админ) Получить временную ссылку на скачивание файла
      security:
        - AdminBasicAuth: []
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Ссылка для скачивания.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DownloadLinkResponse"

  # --- Health Checks ---
  /health:
    get:
      tags:
        - Health Checks
      summary: Проверка состояния сервиса
      responses:
        "200":
          description: Сервис работает.

components:
  schemas:
    # --- Session Schemas ---
    TelegramSessionRequest:
      type: object
      properties:
        telegram_id:
          type: integer
          description: Уникальный идентификатор пользователя в Telegram.
      required: [telegram_id]
    SessionResponse:
      type: object
      properties:
        application_uuid:
          type: string
          format: uuid
          description: Уникальный UUID заявки, используемый как токен для Mini App.

    # --- Application Schemas ---
    ApplicationStatus:
      type: string
      enum: [draft, new, in_progress, completed, rejected]
    ApplicationUpdate:
      type: object
      properties:
        data:
          type: object
          description: JSON-объект с обновленными ответами анкеты.
          additionalProperties: true
    ApplicationAdminUpdate:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/ApplicationStatus"
        admin_comment:
          type: string
          nullable: true
          description: Внутренний комментарий от сотрудника фонда.

    ApplicationPublic:
      description: Модель заявки, видимая пользователю.
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        status:
          $ref: "#/components/schemas/ApplicationStatus"
        data:
          type: object
          description: JSON-объект с ответами на вопросы анкеты.
          additionalProperties: true
    ApplicationAdmin:
      description: Полная модель заявки, видимая администратору.
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        status:
          $ref: "#/components/schemas/ApplicationStatus"
        data:
          type: object
          description: JSON-объект с ответами на вопросы анкеты.
        admin_comment:
          type: string
          nullable: true
        telegram_id:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        files:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationFile"

    # --- File Schemas ---
    ApplicationFile:
      type: object
      properties:
        file_id:
          type: string
          description: ID файла из file-storage-service.
        original_filename:
          type: string
        form_field_id:
          type: string
          description: ID поля из JSON-схемы, к которому относится файл.
    FileLinkRequest:
      type: object
      properties:
        file_id:
          type: string
        original_filename:
          type: string
        form_field_id:
          type: string
      required: [file_id, form_field_id]
    FileUploadResponse:
      type: object
      properties:
        file_id:
          type: string
        filename:
          type: string
        content_type:
          type: string
    DownloadLinkResponse:
      type: object
      properties:
        download_url:
          type: string
          format: uri

  securitySchemes:
    AdminBasicAuth:
      type: http
      scheme: basic
      description: |-
        Basic-аутентификация для доступа к административным эндпоинтам.
        Обрабатывается на уровне Nginx. Учетные данные задаются в `.env`.
